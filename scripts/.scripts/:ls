#!/usr/bin/env python3

import datetime
import subprocess
from subprocess import CalledProcessError
from typing import Iterable

import attrs


def _datetime_cov(val: str) -> str:
    dt = datetime.datetime.fromtimestamp(int(val))
    return dt.strftime("%y-%m-%d %H:%M:%S")


@attrs.define
class Format:
    session_name: str
    session_created: str = attrs.field(converter=_datetime_cov)
    session_windows: str
    session_attached: str

    @classmethod
    def as_format(cls):
        return " | ".join(f"#{{{field.name}}}" for field in attrs.fields(cls))

    @classmethod
    def from_line(cls, line: str):
        return cls(*line.split(" | "))


def fields_padding(fmts: Iterable[Format]):
    def _len(fmt: Format, field):
        return len(getattr(fmt, field))

    fields = (field.name for field in attrs.fields(Format))

    for field in fields:
        yield field, max(_len(fmt, field) for fmt in fmts)


def style_format(fmt: Format, paddings: dict[str, int]):
    name = str.rjust(fmt.session_name, paddings["session_name"])
    created = fmt.session_created
    nwin = str.rjust(fmt.session_windows, paddings["session_windows"])
    attached = " attached" if fmt.session_attached == "1" else ""

    return "{}  created={} #win={}{}".format(name, created, nwin, attached)


def main():
    cmd = ("tmux", "list-sessions", "-F", Format.as_format())
    try:
        cp = subprocess.run(cmd, stdout=subprocess.PIPE, check=True)
    except CalledProcessError as err:
        raise SystemExit(err.returncode)

    out = cp.stdout.decode().strip().splitlines()
    fmts = tuple(Format.from_line(line) for line in out)
    paddings = dict(fields_padding(fmts))

    for fmt in fmts:
        print(style_format(fmt, paddings))


if __name__ == "__main__":
    main()

# vim: ft=python :
