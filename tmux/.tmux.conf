set -g default-command "/usr/bin/fish"
set -g default-terminal "tmux-256color"
set -g history-limit 256
set -g mouse on

# nvim compatible {{{
## https://github.com/neovim/neovim/issues/2035
set -sg escape-time 10
## I do not want nvim to 'autoread'
set-option -g focus-event off
# }}}

# bind {{{
unbind C-b
unbind C-a
unbind %
unbind .
unbind '"'
unbind "'"
unbind l
unbind &
unbind ,
unbind .
unbind f
unbind r

unbind ^b
# consider to use c-space
set -g prefix C-y
bind C-y send-prefix

bind x confirm-before kill-pane
bind X confirm-before kill-window
bind W confirm-before 'kill-window -a'
bind P confirm-before 'kill-pane -a'

bind q display-panes -d 0
bind g command-prompt -T target 'join-pane -s %%'
bind T break-pane -a
bind s display-popup -E ~/.scripts/:s
bind S choose-tree -s -Z
bind m run-shell "~/.scripts/:pathwname"
bind M run-shell "~/.scripts/:pathwname --unset-window-workdir"

# guake-like vi
bind v display-popup -EE -y 0 -h 30% vi

# alt version
bind -n M-0 display-panes -d 0
bind -n M-s display-popup -E ~/.scripts/:s
bind -n M-'[' copy-mode

# }}}

# ui {{{

set-option -g status-justify left
set-option -g status-right-length 60
set-option -g status-left-length 60

# formats
## status
set-option -g status-left ' #[bold]#S '
set-option -g status-right '#[bold]#(tmux showenv -t "#S" BGMODE | cut -d= -f2) @#(hostnamectl hostname) '
## window status
set-option -g window-status-current-format ' #I #W '
set-option -g window-status-separator ' '
set-option -g window-status-format ' #I #W '
## x11 window title
set-option -g set-titles on
set-option -g set-titles-string '#{session_name}:#{window_index} #{pane_title}'

## tmux window title
set-window-option -g automatic-rename off
set-window-option -g pane-base-index 1

# styles which are session-independent depends on session-scoped $BGMODE {{{
set-hook -g session-created {
    if-shell '[ "$(tmux showenv BGMODE)" != "BGMODE=dark" ]' {
        ## message
        set-option -s message-command-style 'fg=color0 bold'
        set-option -s message-style 'fg=color0 bold'
        ## status
        set-option -s status-left-style 'fg=color0 bold'
        set-option -s status-right-style 'fg=color0 bold'
        set-option -s status-style 'fg=color0 nobold'
        ## popup
        set-option -s popup-border-style 'fg=color1'
    }
    # there is no else!
    if-shell '[ "$(tmux showenv BGMODE)" = "BGMODE=dark" ]' {
        ## message
        set-option -s message-command-style 'fg=color7 bold'
        set-option -s message-style 'fg=color7 bold'
        ## status
        set-option -s status-left-style 'fg=color7 bold'
        set-option -s status-right-style 'fg=color7 bold'
        set-option -s status-style 'fg=color7 nobold'
        ## popup
        set-option -s popup-border-style 'fg=color9'
    }
}
set-hook -g window-linked {
    if-shell '[ "$(tmux showenv BGMODE)" != "BGMODE=dark" ]' {
        ## window status
        set-option -w window-status-current-style 'bg=color36,fg=color7 bold'
        set-option -w window-status-style 'bg=color222,fg=color0 nobold'
        ## pane border
        set-option -w pane-border-style 'fg=color222'
        set-option -w pane-active-border-style 'fg=color36'
        ## mode
        set-option -w mode-style 'bg=color222,fg=color0'
        ## copy mode
        set-option -w copy-mode-match-style 'bg=color222,fg=color0 nobold'
        set-option -w copy-mode-current-match-style 'bg=color208,fg=color0 nobold'
    }
    if-shell '[ "$(tmux showenv BGMODE)" = "BGMODE=dark" ]' {
        ## window status
        set-option -w window-status-current-style 'bg=color36,fg=color15 bold'
        set-option -w window-status-style 'bg=color8,fg=color7 nobold'
        ## pane border
        set-option -w pane-border-style 'fg=color222'
        set-option -w pane-active-border-style 'fg=color36'
        ## mode
        set-option -w mode-style 'bg=color222,fg=color8'
        ## copy mode
        set-option -w copy-mode-match-style 'bg=color222,fg=color8 nobold'
        set-option -w copy-mode-current-match-style 'bg=color208,fg=color8 nobold'
    }
} 

# }}}

# }}}

# misc {{{

# starts windows at 1 not 0
set-option -g base-index 1

# passthrough terminal escape sequence
set-option -g allow-passthrough on

# }}}

# vi-like {{{
set -g mode-keys vi
set -g status-keys vi

# y and p as in vim
bind -Tcopy-mode-vi 'v' send -X begin-selection
bind -Tcopy-mode-vi 'y' send -X copy-selection
bind -Tcopy-mode-vi 'Y' send -X copy-pipe "xsel -ib"
bind -Tcopy-mode-vi 'Space' send -X halfpage-down
bind -Tcopy-mode-vi 'Bspace' send -X halfpage-up

# easy-to-remember split pane commands
bind '\' run-shell "~/.scripts/:split --focus-follow right .5"
bind | run-shell "~/.scripts/:split --focus-follow right .3"
bind - run-shell "~/.scripts/:split --focus-follow below .5"
bind _ run-shell "~/.scripts/:split --focus-follow below .3"
bind / command-prompt -p 'split' 'run-shell "~/.scripts/:split %%"'
## alt version
bind -n M-'\' run-shell "~/.scripts/:split --focus-follow right .5"
bind -n M-| run-shell "~/.scripts/:split --focus-follow right .3"
bind -n M-'-' run-shell "~/.scripts/:split --focus-follow below .5"
bind -n M-_ run-shell "~/.scripts/:split --focus-follow below .3"
bind -n M-/ command-prompt -p 'split' 'run-shell "~/.scripts/:split %%"'

# moving between panes with vim movement keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
## alt version
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R
bind -n M-a select-pane -l

# switch panes; prefix-\d is reserved for window switching
## alt version
bind -n M-1 select-pane -t 1
bind -n M-2 select-pane -t 2
bind -n M-3 select-pane -t 3
bind -n M-4 select-pane -t 4
bind -n M-5 select-pane -t 5
bind -n M-6 select-pane -t 6
bind -n M-7 select-pane -t 7
bind -n M-8 select-pane -t 8
bind -n M-9 select-pane -t 9


# resize pane
bind r command-prompt -i -p 'resize-pane' 'run-shell "~/.scripts/:resize %%"'
## alt version
bind -n M-r command-prompt -i -p 'resize-pane' 'run-shell "~/.scripts/:resize %%"'

# alt version for default keybinds
bind -n M-n next-window
bind -n M-p previous-window
bind -n M-';' command-prompt
bind -n M-' ' last-window

# }}}

# vim:fdm=marker:
